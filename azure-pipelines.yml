# Azure DevOps pipeline for automating certificate management with Azure and 
# Let’s Encrypt. This automation is based on Posh-ACME, an ACME v2 client 
# implemented as a PowerShell module that enables you to generate publicly 
# trusted SSL/TLS certificates from an ACME capable certificate authority 
# such as Let's Encrypt.
#
# To enable the certificate management in any environment you need to add and set
# this global variable otherwise the pipeline job will be skipped:
# - DO_RENEW_CERT = true
# To force the certificate to be renewed regardless the suggested renewal window 
# this parameter must be set:
# - FORCE = true
# The following parameter needs to be set to identify the environment for which
# should be ordered or renewed a certificate via ACME:
# - ENVIRONMENT: TEST | PRODUCTION
#
# The following pipeline variables have to be added and configured based on the
# environment:
# - PRODUCTION_AZURE_SUBSCRIPTION: service connection name
# - PRODUCTION_AcmeContact: email which should be notified before cert expire
# - PRODUCTION_AcmeDirectory: LE_STAGE | LE_PROD
# - PRODUCTION_CertificateNames: comma-separated list of domain names 
# - PRODUCTION_KeyVaultResourceId: resource ID of the key vault 
#
# - TEST_AZURE_SUBSCRIPTION: service connection name for test only
# - TEST_AcmeContact: email which should be notified before cert expire
# - TEST_AcmeDirectory: LE_STAGE | LE_PROD
# - TEST_CertificateNames: comma-separated list of domain names 
# - TEST_KeyVaultResourceId: resource ID of the key vault
#
# NOTE. The latest release version of Posh-ACME can be found in the PowerShell 
# Gallery at https://www.powershellgallery.com/packages/Posh-ACME.
# The remote installation from the gallery is easiest using Install-Module from 
# the PowerShellGet module but, for security reasons, we prefer to store 
# the NuGet package to an internal repository. 

parameters:
  - name: 'ENVIRONMENT'
    displayName: 'Select the environment for which renew the certificate:'
    type: string
    default: TEST
    values:
      - TEST  
      - PRODUCTION

  - name: 'FORCE'
    displayName: 'force certificate to be renewed'
    type: boolean
    default: False
    values:
      - False  
      - True

variables:
  - name: RENEW_CERT_ENV
    value: ${{ parameters.ENVIRONMENT }}

# Linux based agent; all except the first step will also work on Windows
pool:
  vmImage: 'ubuntu-latest'

# The scheduled trigger will be set in the Azure DevOps portal
trigger: none

jobs:
  - job: certificate_management 
    condition: and(succeeded(), eq(variables['DO_RENEW_CERT'], true))
    steps:
      # 1. Set the number of the build
      - task: PowerShell@2
        displayName: Update Build Number
        inputs:
          targetType: 'inline'
          script: '$id = "$(Build.BuildId)"; $date = Get-Date -Format "yyyy.MMdd"; Write-Host "##vso[build.updatebuildnumber]$date.$id"'

      # 2. Install the Az PowerShell modules our script will need (Az.Accounts, Az.KeyVault, Az.Resources)
      - task: PowerShell@2
        displayName: Install Az Modules
        inputs:
          targetType: 'inline'
          script: 'Install-Module Az.Accounts, Az.KeyVault, Az.Resources -Force'
          errorActionPreference: 'stop'
          failOnStderr: true
          pwsh: true

      # 3. Install Posh-ACME PowerShell module from a local NuGet package
      - task: PowerShell@2
        displayName: Install Posh-ACME Module
        inputs:
          targetType: 'inline'
          script: |
            Expand-Archive -LiteralPath (Resolve-Path "./Packages/*.nupkg" | Select -ExpandProperty Path) -DestinationPath ./pwsh_modules/Posh-ACME
            $env:PSModulePath += ":./pwsh_modules"
            echo "##vso[task.setvariable variable=PSModulePath]$env:PSModulePath"
            Get-Module -ListAvailable -Verbose Posh-ACME
          errorActionPreference: 'stop'
          failOnStderr: true
          pwsh: true

      # 4.1 Order or renew a certificate via ACME in PRODUCTION env
      - task: AzurePowerShell@4
        displayName: 'PROD - Order or Renew Certificate'
        condition: and(succeeded(), eq(variables['RENEW_CERT_ENV'], 'PRODUCTION'))
        inputs:
          azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
          scriptType: 'FilePath'
          scriptPath: 'New-AcmeCertificate.ps1 '
          scriptArguments: '-AcmeDirectory "$(PRODUCTION_AcmeDirectory)" -AcmeContact "$(PRODUCTION_AcmeContact)" -CertificateNames "$(PRODUCTION_CertificateNames)" -KeyVaultResourceId "$(PRODUCTION_KeyVaultResourceId)" -ForceRenewal "${{ parameters.FORCE }}"'
          errorActionPreference: 'stop'
          failOnStandardError: true
          azurePowerShellVersion: 'LatestVersion'
        env:
          PSModulePath: $(PSModulePath)

      # 4.2 Import the certificate into Azure Key Vault in PRODUCTION env
      - task: AzurePowerShell@4
        displayName: 'PROD - Import Certificate into Key Vault'
        condition:
          and(
            succeeded(),
            and(
              ne(variables['PRODUCTION_KeyVaultResourceId'], ''),
              eq(variables['RENEW_CERT_ENV'], 'PRODUCTION')
            )
          )
        inputs:
          azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
          scriptType: 'FilePath'
          scriptPath: 'Import-AcmeCertificateToKeyVault.ps1 '
          scriptArguments: '-CertificateNames "$(PRODUCTION_CertificateNames)" -KeyVaultResourceId "$(PRODUCTION_KeyVaultResourceId)"'
          errorActionPreference: 'stop'
          failOnStandardError: true
          azurePowerShellVersion: 'LatestVersion'
        env:
          PSModulePath: $(PSModulePath)

      # 5.1 Order or renew a certificate via ACME in TEST env
      - task: AzurePowerShell@4
        displayName: 'TEST - Order or Renew Certificate'
        condition: and(succeeded(), eq(variables['RENEW_CERT_ENV'], 'TEST'))
        inputs:
          azureSubscription: '$(TEST_AZURE_SUBSCRIPTION)'
          scriptType: 'FilePath'
          scriptPath: 'New-AcmeCertificate.ps1 '
          scriptArguments: '-AcmeDirectory "$(TEST_AcmeDirectory)" -AcmeContact "$(TEST_AcmeContact)" -CertificateNames "$(TEST_CertificateNames)" -KeyVaultResourceId "$(TEST_KeyVaultResourceId)" -ForceRenewal "${{ parameters.FORCE }}"'
          errorActionPreference: 'stop'
          failOnStandardError: true
          azurePowerShellVersion: 'LatestVersion'
        env:
          PSModulePath: $(PSModulePath)

      # 5.2 Import the certificate into Azure Key Vault in TEST env
      - task: AzurePowerShell@4
        displayName: 'TEST - Import Certificate into Key Vault'
        condition:
          and(
            succeeded(),
            and(
              ne(variables['TEST_KeyVaultResourceId'], ''),
              eq(variables['RENEW_CERT_ENV'], 'TEST')
            )
          )
        inputs:
          azureSubscription: '$(TEST_AZURE_SUBSCRIPTION)'
          scriptType: 'FilePath'
          scriptPath: 'Import-AcmeCertificateToKeyVault.ps1 '
          scriptArguments: '-CertificateNames "$(TEST_CertificateNames)" -KeyVaultResourceId "$(TEST_KeyVaultResourceId)"'
          errorActionPreference: 'stop'
          failOnStandardError: true
          azurePowerShellVersion: 'LatestVersion'
        env:
          PSModulePath: $(PSModulePath)
